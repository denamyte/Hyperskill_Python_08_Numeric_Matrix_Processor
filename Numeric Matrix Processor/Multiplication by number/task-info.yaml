type: edu
custom_name: stage2
files:
- name: processor/processor.py
  visible: true
  text: |
    print('Hello, world!')
  learner_created: false
- name: tests.py
  visible: false
  text: |
    import string
    from collections import namedtuple

    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    TestClue = namedtuple("TestClue", ["answer", "feedback"])


    class CalcTest(StageTest):
        ERROR_STRING = "ERROR"

        def generate(self) -> List[TestCase]:
            return [
                TestCase(
                    stdin=
                    '3 3\n'
                    '1 2 3\n'
                    '4 5 6\n'
                    '7 8 9\n'
                    '3\n'
                    ,
                    attach=TestClue(
                        answer=
                        '3 6 9\n'
                        '12 15 18\n'
                        '21 24 27\n'
                        ,
                        feedback=
                        ''
                    )
                ),
                TestCase(
                    stdin=
                    '2 3\n'
                    '1 2 3\n'
                    '4 5 6\n'
                    '0\n'
                    ,
                    attach=TestClue(
                        answer=
                        '0 0 0\n'
                        '0 0 0\n'
                        ,
                        feedback=
                        ''
                    )
                ),
                TestCase(
                    stdin=
                    '5 5\n'
                    '1 4 6 7 8\n'
                    '1 9 5 2 2\n'
                    '1 4 3 5 7\n'
                    '1 4 6 4 1\n'
                    '1 4 5 7 1\n'
                    '5\n'
                    ,
                    attach=TestClue(
                        answer=
                        '5 20 30 35 40\n'
                        '5 45 25 10 10\n'
                        '5 20 15 25 35\n'
                        '5 20 30 20 5\n'
                        '5 20 25 35 5\n'
                        ,
                        feedback=
                        ''
                    )
                ),
                TestCase(
                    stdin=
                    '1 1\n'
                    '1\n'
                    '1\n'
                    ,
                    attach=TestClue(
                        answer=
                        '1\n'
                        ,
                        feedback=
                        ''
                    )
                ),
                TestCase(
                    stdin=
                    '1 1\n'
                    '0\n'
                    '1\n'
                    ,
                    attach=TestClue(
                        answer=
                        '0\n'
                        ,
                        feedback=
                        ''
                    )
                ),
                TestCase(
                    stdin=
                    '3 2\n'
                    '1 2\n'
                    '8 1\n'
                    '9 1\n'
                    '10\n'
                    ,
                    attach=TestClue(
                        answer=
                        '10 20\n'
                        '80 10\n'
                        '90 10\n'
                        ,
                        feedback=
                        ''
                    )
                ),
            ]

        def is_equal_matrices(self, actual: list, expected: list) -> bool:
            if len(actual) != len(expected):
                return False
            for actual_line, expected_line in zip(actual, expected):
                if len(actual_line) != len(expected_line):
                    return False
                else:
                    for actual, expected in zip(actual_line, expected_line):
                        try:
                            if abs(float(actual) - float(expected)) > 0.01:
                                return False
                        except ValueError:
                            raise WrongAnswer("Looks like your matrix contains not only numbers!")
            return True

        def check(self, reply: str, attach) -> CheckResult:
            reply = reply.strip()
            answer = str(attach.answer).strip()
            if answer == self.ERROR_STRING:
                return CheckResult(reply == self.ERROR_STRING, f'Expected output:\n{answer}\nYour output:\n{reply}')
            else:
                characters = set(string.ascii_lowercase)
                actual = [line.split() for line in reply.splitlines() if line and characters.isdisjoint(line)]
                expected = list(map(str.split, answer.split("\n")))
                return CheckResult(self.is_equal_matrices(expected, actual), attach.feedback)


    if __name__ == '__main__':
        CalcTest("processor.processor").run_tests()
  learner_created: false
- name: processor/user_io.py
  visible: true
  text: |
    from typing import List
    from mtx_op import MtxOp, Mtx2D


    class UserIO:
        """ Input different matrix data and output the results of matrix operations """

        def __init__(self):
            self.result: str = ''
            self.main()

        def main(self):
            self.stage1()
            print(self.result)

        def stage1(self):
            mtx_ar = [self.input_matrix() for _ in range(2)]
            self.result = 'ERROR' if not MtxOp.can_add_matrices(*mtx_ar) \
                else self.mtx_to_str_i(MtxOp.sum_of_matrices(*mtx_ar))

        def input_matrix(self) -> Mtx2D:
            lines = self.read_int_row()[0]
            return [list(map(float, input().split(' '))) for _ in range(lines)]

        def read_int_row(self) -> List[int]:
            return list(map(int, input().split(' ')))

        def mtx_to_str_i(self, m: Mtx2D) -> str:
            """ Convert a matrix to a string representation using int values """
            return '\n'.join(' '.join(map(str, map(int, row))) for row in m)
  learner_created: true
- name: processor/mtx_op.py
  visible: true
  text: |
    from typing import List

    Mtx2D = List[List[float]]


    class MtxOp:
        """
        Check if an operation can be performed on matrices,
        perform different matrix operations.
        """

        @staticmethod
        def can_add_matrices(m1: Mtx2D, m2: Mtx2D) -> bool:
            return len(m1) > 0 and len(m1) == len(m2) and len(m1[0]) == len(m2[0])

        @staticmethod
        def sum_of_matrices(m1: Mtx2D, m2: Mtx2D) -> Mtx2D:
            return [[a + b for (a, b) in zip(row1, row2)] for (row1, row2) in zip(m1, m2)]
  learner_created: true
feedback_link: https://hyperskill.org/projects/96/stages/529/implement#comment
status: Unchecked
record: -1
